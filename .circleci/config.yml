version: 2.1 

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
        id:
            type: string      
    steps:
           
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            if aws s3api head-bucket --bucket udapeople-<< parameters.id >> 
            then
              aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            fi
            #exit 1
            
      - run:
          name: Delete the AWS CloudFormation stacks
          when: on_fail          
          command: |   
            if aws cloudformation wait stack-exists --stack-name udapeople-frontend-<< parameters.id >> 
            then 
              echo "Deleting frontend stack"
              aws cloudformation delete-stack --region us-east-1 --stack-name udapeople-frontend-<< parameters.id >>
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-backend-<< parameters.id >>
            then
              echo "deleting backend stack"
              aws cloudformation delete-stack --region us-east-1 --stack-name udapeople-backend-<< parameters.id >>
            fi

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #Read more about this
            SUCCESS=$(curl -k https://kvdb.io/RwYjzkpo1Ze5cvbM7bK1g6/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              #exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
                cd frontend
                npm install
                npm run build
                #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
                cd backend
                npm install
                npm run build
                #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            #npm audit fix --audit-level=critical --force
            npm audit fix --force
            #npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=prj3-backend-deploy \
              --region us-east-1 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=prj3-frontend-deploy \
              --region us-east-1 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            cd .circleci/ansible
            echo "[web]" > inventory.txt
            
            export BACKEND_IP=$(aws ec2 describe-instances \
                                --region us-east-1 \
                                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                                --output text >> inventory.txt)
                                
            echo "Server_Ip = ${BACKEND_IP}" 
            echo ${BACKEND_IP} >> inventory.txt
            cat inventory.txt
            
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - run:
          name: Install tar, gzip and awscli
          command: |
            apk add openssh-client
            apk add tar gzip
            apk update pip3
            pip3 install awscli 
            
      - add_ssh_keys:
          fingerprints: ["0c:55:f7:d7:ad:e3:73:19:0b:e6:c6:46:5c:04:76:94"] 
      # attach workspace
      - attach_workspace: 
            at: ~/
      - run: cat .circleci/ansible/inventory.txt
      
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --no-cache --update ansible
            #exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            #exit 1
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
            id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace: 
            at: ~/
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend 
            npm cache clean --force
            npm install
            #npm audit fix --force
            npm run build
            npm run migrations > migrations.txt
            cat migrations.txt
            #exit 1
      - run:
          name: Send migration results to kvdb
          command: |
            cd ~/project/backend
            if grep -q "No migrations are pending" migrations.txt
            then
              echo "Migration is successful"
              curl -k -d '1' https://kvdb.io/RwYjzkpo1Ze5cvbM7bK1g6/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "Failure"
              curl -k -d '0' https://kvdb.io/RwYjzkpo1Ze5cvbM7bK1g6/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi                              
     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar 
          command: |
            yum install -y tar gzip      
      # attach workspace
      - attach_workspace: 
            at: ~/ 
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y gcc-c++ make
            yum install sudo -y
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo -E bash - 
            yum install -y nodejs
            cd ~/project/frontend
            npm install
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region us-east-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}" > ~/project/frontend/.env
            cd ~/project/frontend
            #printing variable value
            cat .env  
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd ~/project/frontend
            npm install
            npm run build
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["0c:55:f7:d7:ad:e3:73:19:0b:e6:c6:46:5c:04:76:94"] 
      # attach workspace
      - attach_workspace: 
            at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible curl rsync openssh nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 25m
          command: |
            # your code here
            cd ~/project/.circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations      

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get install curl python python-pip && pip install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region us-east-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region us-east-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)            
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
            if curl "${API_URL}" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                # Change this to 0 after the job fails
                exit 0
              else
                exit 1
              fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations 

  cloudfront-update:
      docker:
      # Docker image here that supports AWS CLI.
      - image: amazon/aws-cli
      steps:
      # Checkout code from git
      - checkout
      
      - run:
          name: Install dependencies
          command: |
              yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
              # your code here
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --region us-east-1 \
              --stack-name "InallDep" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=prj3-InallDep
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations 

  cleanup:
      docker:
      # Docker image here
      - image: amazon/aws-cli
      steps:
      # Checkout code from git.
      - checkout
      - run:
          name: Install dependencies
          command: |
              yum install -y tar gzip 
      - run:
          name: Get old stack workflow id
          command: |
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
                  
              echo OldWorkflowID- "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              
              #put the list of stacks here
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                  
              echo Stack names- "${STACKS[@]}"
              
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                  echo "=============delete confirmed======================="              
                  aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                  aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                  aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              else
                echo "==============cannot cleanup========================"
                echo "no stacks found"
              fi              
              
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]